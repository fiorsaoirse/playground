/*

1. Что такое стек вызовов и является ли он частью v8?

Стек вызовов - это структура данных, которую v8 использует для отслеживания вызовов функций. 
Каждый раз, когда мы инициируем вызов функции, движок кладет в стек ссылку на эту функцию и на все
вложенные функции, которые вызываются внутри нее. Это относится так же к рекурсивным функциям.
Почему это важно понимать в Node? Потому что мы получаем только ОДИН стек вызовов на каждый процесс Node.
Если стек занят - весь процесс Node занят.


2. Что такое цикл событий и является ли он частью v8?

Цикл событий обеспечивается библиотекой libuv и НЕ является частью v8.
Цикл событий это сущность, которая перехватывает произошедшее событие и "конвертирует" его в вызов коллбэка.
Т.е. это цикл, который берет событие из очереди событий и пуляет его коллбэк в новый tick стека вызова.
Эта штука сидит между стеком и очередью событий - когда стек опустеет, она берет новый таск из очереди событий.


3. Что делает Node, когда стек и очередь опустеют?

Программа просто завершает свою работу. Когда мы запускаем программу, Node автоматически запускает цикл событий,
и когда стек пустой, а в цикле событий больше ничего нет, программа завершает свою работу. Чтобы программа
продолжала работать, нужно что-то класть в цикл событий, например запускать таймер или сервер.


4. Какие зависимости есть у Node кроме v8 и libuv?

Вот список библиотек, которые используются Node:
* http-parser
* c-ares
* OpenSSL
* zlib


5. Почему переменные верхнего уровня не являются глобальными?

Пример - есть модуль1, в котором объявлена переменная V. Есть модуль2, который имортирует модуль1 и пытается
использовать там переменную V. Получаем ошибку, что переменная V не определена. Все дело в модульной системе
Node - каждый модуль за кулисами обернут в свою собственную IIFE (Immediately Invoked Function Expression).
Поэтому все переменные объявлены в своем окружении, к которому извне не добраться.


6. Когда допустимо использовать синхронные версии методов (*Sync)?

Например, если нужно сделать что-то до того, как сервер будет загружен, например, считать какие-нибудь конфиги,
от которых зависит старт сервера на каком-то порту и прочее. Гораздо проще сделать это синхронно, чем городить
огород из коллбэков. В остальных случаях не трожь!

*/